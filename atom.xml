<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://g-h-li.github.io/GH-Li.github.io/</id>
    <title>GH-Li的分享</title>
    <updated>2021-04-06T04:58:06.554Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://g-h-li.github.io/GH-Li.github.io/"/>
    <link rel="self" href="https://g-h-li.github.io/GH-Li.github.io/atom.xml"/>
    <subtitle>I&apos;m going to live every minute of my life!</subtitle>
    <logo>https://g-h-li.github.io/GH-Li.github.io/images/avatar.png</logo>
    <icon>https://g-h-li.github.io/GH-Li.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, GH-Li的分享</rights>
    <entry>
        <title type="html"><![CDATA[二分查找]]></title>
        <id>https://g-h-li.github.io/GH-Li.github.io/post/er-fen-cha-zhao/</id>
        <link href="https://g-h-li.github.io/GH-Li.github.io/post/er-fen-cha-zhao/">
        </link>
        <updated>2021-04-06T04:26:09.000Z</updated>
        <summary type="html"><![CDATA[<p><img src="https://g-h-li.github.io/GH-Li.github.io//post-images/1617685052657.jfif" alt="" loading="lazy">## 注意点：</p>
<ul>
<li><code>high=num.length -1; low=0</code></li>
<li><code>mid = (low + high) &gt;&gt; 1</code></li>
<li>循环终止条件：<code>low &lt;= high</code>，不是<code>low&lt;high</code></li>
<li>跳出循环时，<code>low != high</code></li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<p><img src="https://g-h-li.github.io/GH-Li.github.io//post-images/1617685052657.jfif" alt="" loading="lazy">## 注意点：</p>
<ul>
<li><code>high=num.length -1; low=0</code></li>
<li><code>mid = (low + high) &gt;&gt; 1</code></li>
<li>循环终止条件：<code>low &lt;= high</code>，不是<code>low&lt;high</code></li>
<li>跳出循环时，<code>low != high</code></li>
</ul>
<!-- more -->
<h2 id="算法应用">算法应用</h2>
<pre><code class="language-java">//num为升序数组
public int search(int[] nums, int target){
    int low=0; int high= num.length-1; int mid;
    while(low &lt;= high){
        mid = (low+high) &gt;&gt; 1;
        if(nums[mid] == target){
            return mid;
        }else if(nums[mid] &lt; target){
            low = mid +1;
        }else{
            high = mid -1;
        }
    }
}
</code></pre>
<p>在应用过程中，会出现相关变种，变化主要存在两处：</p>
<ol>
<li>改变if-else的判断条件：如将<code>==</code>和<code>&lt;</code>这两种情况合并，以此去查找target在有序数组的上边界（<code>low</code>)，只判断<code>&lt;</code>，查找target在有序数组的下边界（<code>high</code>)。</li>
<li>改变<code>low</code>和<code>high</code>值的变化规则，如：查找循环数组分界点、查找山峰数组的山峰</li>
</ol>
]]></content>
    </entry>
</feed>